{"version":3,"sources":["components/Clock.js","components/BasicTimeline.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","state","date","timeZone","this","timerID","setInterval","tick","clearInterval","setState","Date","dateOptions","weekday","year","month","day","timeOptions","hour12","localDate","toLocaleString","localTime","toLocaleTimeString","Component","BasicTimeline","Timeline","TimelineItem","TimelineSeparator","TimelineDot","TimelineConnector","TimelineContent","App","className","style","display","justifyContent","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wQAgDeA,G,wDA7CX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,KAAM,EAAKF,MAAME,KACjBC,SAAU,EAAKH,MAAMG,UAJV,E,gEAQE,IAAD,OAChBC,KAAKC,QAAUC,aAAY,kBAAM,EAAKC,SAAQ,O,6CAI9CC,cAAcJ,KAAKC,W,6BAInBD,KAAKK,SAAS,CACVP,KAAM,IAAIQ,S,+BAKd,IAAIC,EAAc,CACdR,SAAUC,KAAKH,MAAME,SACrBS,QAAS,OACTC,KAAM,UACNC,MAAO,QACPC,IAAK,WAELC,EAAc,CACdb,SAAUC,KAAKH,MAAME,SACrBc,QAAQ,GAERC,EAAYd,KAAKH,MAAMC,KAAKiB,eAAe,QAASR,GACpDS,EAAYhB,KAAKH,MAAMC,KAAKmB,mBAAmB,QAASL,GAC5D,OACI,6BACI,4BAAKE,GACL,4BAAKE,Q,GAxCDE,c,gDCyCLC,E,kDAlCX,WAAYvB,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,GAFE,E,qDAMf,OACI,kBAACuB,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,gBAEJ,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,gBAEJ,kBAACJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,MACA,kBAACC,EAAA,EAAD,OAEJ,kBAACC,EAAA,EAAD,qB,GA5BQP,aCsBbQ,E,uKAvBP,OACI,yBAAKC,UAAU,OACX,4BAAQA,UAAU,cACd,qDAEJ,yBAAKA,UAAU,aAAaC,MAAO,CAACC,QAAQ,OAAOC,eAAe,iBAC9D,yBAAKH,UAAU,SACX,wCACA,kBAAC,EAAD,CAAO7B,KAAM,IAAIQ,KAAQP,SAAU,sBAEvC,yBAAK4B,UAAU,SACX,wCACA,kBAAC,EAAD,CAAO7B,KAAM,IAAIQ,KAAQP,SAAU,oBAG3C,yBAAK4B,UAAU,kBACX,kBAAC,EAAD,Y,GAlBFT,aCOEa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e18bdd3d.chunk.js","sourcesContent":["import React, { Component } from \"react\"\n\nclass Clock extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            date: this.props.date,\n            timeZone: this.props.timeZone\n        }\n    }\n\n    componentDidMount() {\n        this.timerID = setInterval(() => this.tick(), 1000)\n    }\n\n    componentWillUnmount() {\n        clearInterval(this.timerID)\n    }\n\n    tick() {\n        this.setState({\n            date: new Date()\n        })\n    }\n\n    render() {\n        let dateOptions = {\n            timeZone: this.state.timeZone,\n            weekday: \"long\",\n            year: \"numeric\",\n            month: \"short\",\n            day: \"numeric\"\n        }\n        let timeOptions = {\n            timeZone: this.state.timeZone,\n            hour12: false\n        }\n        let localDate = this.state.date.toLocaleString(\"en-US\", dateOptions)\n        let localTime = this.state.date.toLocaleTimeString(\"en-US\", timeOptions)\n        return (\n            <div>\n                <h3>{localDate}</h3>\n                <h3>{localTime}</h3>\n            </div>\n        )\n    }\n}\n\nexport default Clock","import React, { Component } from \"react\"\nimport Timeline from \"@material-ui/lab/Timeline\"\nimport TimelineItem from \"@material-ui/lab/TimelineItem\"\nimport TimelineSeparator from \"@material-ui/lab/TimelineSeparator\"\nimport TimelineConnector from \"@material-ui/lab/TimelineConnector\"\nimport TimelineContent from \"@material-ui/lab/TimelineContent\"\nimport TimelineDot from \"@material-ui/lab/TimelineDot\"\n\nclass BasicTimeline extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {}\n    }\n    \n    render() {\n        return (\n            <Timeline>\n                <TimelineItem>\n                    <TimelineSeparator>\n                        <TimelineDot />\n                        <TimelineConnector />\n                    </TimelineSeparator>\n                    <TimelineContent>Node 1</TimelineContent>\n                </TimelineItem>\n                <TimelineItem>\n                    <TimelineSeparator>\n                        <TimelineDot />\n                        <TimelineConnector />\n                    </TimelineSeparator>\n                    <TimelineContent>Node 2</TimelineContent>\n                </TimelineItem>\n                <TimelineItem>\n                    <TimelineSeparator>\n                        <TimelineDot />\n                        <TimelineConnector />\n                    </TimelineSeparator>\n                    <TimelineContent>Node 3</TimelineContent>\n                </TimelineItem>\n            </Timeline>\n        )\n    }\n}\n\nexport default BasicTimeline\n","import React, { Component } from 'react'\nimport './App.css'\nimport Clock from './components/Clock'\nimport BasicTimeline from './components/BasicTimeline'\n\nclass App extends Component {\n    render() {\n        return (\n            <div className=\"App\">\n                <header className=\"App-header\">\n                    <h1>A Tale of Two Cities</h1>\n                </header>\n                <div className=\"Clock-list\" style={{display:'flex',justifyContent:'space-around'}}>\n                    <div className=\"Clock\">\n                        <h2>New York</h2>\n                        <Clock date={new Date()} timeZone={\"America/New_York\"}/>\n                    </div>\n                    <div className=\"Clock\">\n                        <h2>Hangzhou</h2>\n                        <Clock date={new Date()} timeZone={\"Asia/Shanghai\"}/>\n                    </div>\n                </div>\n                <div className=\"Basic Timeline\">\n                    <BasicTimeline />\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}